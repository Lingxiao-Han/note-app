name: CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  OPENSHIFT_PROJECT: ${{ secrets.OPENSHIFT_PROJECT }}
  BACKEND_IMAGE: notes-backend
  FRONTEND_IMAGE: notes-frontend

jobs:
  deploy:
    name: "Continuous Deployment"
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install OpenShift CLI
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz
          tar -xvzf openshift-client-linux.tar.gz
          sudo mv oc /usr/local/bin/
          oc version

      - name: Login to OpenShift
        run: |
          oc login ${{ secrets.OPENSHIFT_SERVER }} --token=${{ secrets.OPENSHIFT_TOKEN }}
          oc project ${{ env.OPENSHIFT_PROJECT }}

      - name: Clean old builds
        run: |
          oc get builds -o name | xargs -r oc delete


      - name: Deploy Backend
        working-directory: server
        run: |
          oc get bc ${{ env.BACKEND_IMAGE }} || \
          oc new-build --name=${{ env.BACKEND_IMAGE }} --image-stream=openshift/nodejs:18-ubi8 --binary --strategy=source
          oc start-build ${{ env.BACKEND_IMAGE }} --from-dir=. --follow
          oc rollout restart deployment/${{ env.BACKEND_IMAGE }}

      - name: Deploy Frontend
        working-directory: client
        run: |
          oc get bc ${{ env.FRONTEND_IMAGE }} || \
          oc new-build --name=${{ env.FRONTEND_IMAGE }} --image-stream=openshift/nodejs:18-ubi8 --binary --strategy=source
          oc start-build ${{ env.FRONTEND_IMAGE }} --from-dir=. --follow
          oc rollout restart deployment/${{ env.FRONTEND_IMAGE }}


      - name: Expose Services
        run: |
          oc get route ${{ env.BACKEND_IMAGE }} || \
          oc expose svc/${{ env.BACKEND_IMAGE }} --port=8000 --name=${{ env.BACKEND_IMAGE }}
          oc get route ${{ env.FRONTEND_IMAGE }} || \
          oc expose svc/${{ env.FRONTEND_IMAGE }} --port=8080 --name=${{ env.FRONTEND_IMAGE }}

      - name: Verify Routes
        run: |
          echo "Backend route:"
          oc get route ${{ env.BACKEND_IMAGE }}-route -o jsonpath='{.spec.host}'
          echo "Frontend route:"
          oc get route ${{ env.FRONTEND_IMAGE }}-route -o jsonpath='{.spec.host}'
